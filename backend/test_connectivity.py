import pytest
import requests
import os
import time

# Configuration
BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000")

class TestConnectivity:
    """Tests de connectivit√© pour valider la d√©tection automatique d'erreurs"""
    
    def test_backend_health_with_retry(self):
        """Test de sant√© du backend avec retry - devrait passer"""
        max_retries = 3
        for attempt in range(max_retries):
            try:
                response = requests.get(f"{BASE_URL}/health", timeout=5)
                assert response.status_code == 200
                assert response.json()["status"] == "healthy"
                print(f"‚úÖ Backend accessible (tentative {attempt + 1})")
                return
            except requests.exceptions.RequestException as e:
                print(f"‚ö†Ô∏è Tentative {attempt + 1} √©chou√©e: {e}")
                if attempt < max_retries - 1:
                    time.sleep(2)
                else:
                    raise
    
    def test_backend_connection_timeout(self):
        """Test de timeout de connexion - simule une erreur de connectivit√©"""
        # Ce test va √©chouer intentionnellement pour d√©montrer la d√©tection d'erreur
        try:
            # Tentative de connexion √† un port inexistant pour simuler une erreur
            response = requests.get("http://localhost:9999/health", timeout=2)
            assert False, "Cette ligne ne devrait jamais √™tre atteinte"
        except requests.exceptions.ConnectionError:
            # C'est l'erreur attendue - on la laisse passer pour d√©montrer la d√©tection
            print("‚ùå Erreur de connectivit√© d√©tect√©e (comportement attendu)")
            raise Exception("Erreur de connectivit√© simul√©e pour tester la CI")
    
    def test_database_connectivity(self):
        """Test de connectivit√© √† la base de donn√©es via l'API"""
        try:
            response = requests.get(f"{BASE_URL}/rooms", timeout=5)
            assert response.status_code == 200
            assert isinstance(response.json(), list)
            print("‚úÖ Base de donn√©es accessible via l'API")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erreur de connectivit√© base de donn√©es: {e}")
            raise
    
    def test_api_response_time_under_load(self):
        """Test de performance sous charge - simule une surcharge"""
        start_time = time.time()
        
        # Faire plusieurs requ√™tes simultan√©es pour simuler une charge
        responses = []
        for i in range(5):
            try:
                response = requests.get(f"{BASE_URL}/health", timeout=10)
                responses.append(response)
            except requests.exceptions.RequestException as e:
                print(f"‚ùå Requ√™te {i+1} √©chou√©e: {e}")
                raise
        
        end_time = time.time()
        total_time = end_time - start_time
        
        # Si le temps de r√©ponse est trop long, on consid√®re cela comme une erreur
        if total_time > 10:
            print(f"‚ùå Temps de r√©ponse trop long: {total_time:.2f}s")
            raise Exception(f"Performance d√©grad√©e d√©tect√©e: {total_time:.2f}s")
        
        print(f"‚úÖ Performance acceptable: {total_time:.2f}s")
        assert total_time < 10

# Test pour simuler une erreur de configuration
def test_misconfigured_endpoint():
    """Test d'un endpoint mal configur√© - simule une erreur de configuration"""
    # Ce test va √©chouer pour d√©montrer la d√©tection d'erreur
    try:
        response = requests.get(f"{BASE_URL}/nonexistent-endpoint", timeout=5)
        if response.status_code == 404:
            print("‚ùå Endpoint inexistant d√©tect√© (comportement attendu)")
            raise Exception("Endpoint mal configur√© d√©tect√© pour tester la CI")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de requ√™te: {e}")
        raise Exception("Erreur de configuration d√©tect√©e pour tester la CI")

# Test de simulation d'erreur r√©seau
def test_network_simulation():
    """Test de simulation d'erreur r√©seau - d√©montre la d√©tection automatique"""
    # Simulation d'une panne r√©seau temporaire
    print("üîç Simulation d'une panne r√©seau...")
    
    # Ce test va √©chouer intentionnellement
    try:
        # Tentative de connexion √† un serveur inexistant
        response = requests.get("http://192.168.999.999:8000/health", timeout=1)
        assert False, "Connexion impossible - erreur r√©seau simul√©e"
    except requests.exceptions.RequestException:
        print("‚ùå Panne r√©seau simul√©e d√©tect√©e (comportement attendu)")
        raise Exception("Erreur r√©seau simul√©e pour valider la d√©tection automatique")
